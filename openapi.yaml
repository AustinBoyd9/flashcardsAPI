openapi: 3.0.0
info:
  version: 0.0.1
  title: The Stack Exchange (Social-Powered Knowledge sharing platform)
  description: >-
    Allows users to create cards (data that is structured into two distinct
    parts) and save them in stacks
servers:
  - url: https://localhost:8000/
    description: Current location of API (Subject to change)
tags:
  - name: Users
  - name: Stacks
paths:
  /users/{id}:
    get:
      summary: list a specific user based on ID
      description: takes an id and returns a user object
      tags:
        - Users
      operationId: getUserById
      parameters:
        - in: path
          name: id # The name is the same as in the path!
          required: true
          schema:
            type: integer
            minimum: 1
          
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: BAD REQUEST
        '401':
          description:  UNAUTHORIZED
          

          
    delete:
      summary: Delete a user based on ID
      description: takes an id, attempts to delete the user object and returns a boolean describing if the operation was successful. 
      tags:
        - Users
      operationId: deleteUserById
      parameters:
        - in: path
          name: id 
          required: true
          schema:
            type: integer
            minimum: 1
          
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: BAD REQUEST
        '401':
        
          description:  UNAUTHORIZED      
  /users/{id}/flashcards:
    get:
      summary: list a specific user based on ID
      description: takes an id and returns a user object
      tags:
        - Users
      operationId: getFlashcardsByUser
      parameters:
        - in: path
          name: id # The name is the same as in the path!
          required: true
          schema:
            type: integer
            minimum: 1
        - in: header
          name: username 
          required: true
          schema:
            type: string
            minimum: 1
        - in: header
          name: password
          required: true
          schema:
            type: string
            minimum: 1    
          
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: BAD REQUEST
        '401':
          description:  UNAUTHORIZED
    
          
  /users:
    post:
      summary: Adds a user
      description: Adds a user
      tags:
        - Users
      operationId: createUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/stack'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
    get:
      summary: Gets all stacks
      description: Gets all card stacks from the user
      tags:
        - Stacks
      operationId: Getstacks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/stack'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
    
  /stacks/{id}:
    get:
      summary: Get a stack by ID
      description: takes an id, returns a matching stack object with that ID if possible. 
      tags:
        - Stacks
      operationId: getStackById
      parameters:
        - in: path
          name: id 
          required: true
          schema:
            type: integer
            minimum: 1
        
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/stack'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
          
    delete:
      summary: Delete a stack by ID
      description: Takes an ID and returns a boolean describing if the stack was deleted. 
      tags:
        - Stacks
      operationId: deleteStackById
      parameters:
        - in: path
          name: id 
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/card'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED   
          
          
  /stacks/cards:
    get:
      summary: Get all Cards
      description: returns all cards belonging to any stack the current user is authorized to read. 
      tags:
        - Stacks
      operationId: getAllCards
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/card'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED

    post:
      summary: Add a Card
      description: Takes a flashcard JSON object and adds it
      tags:
        - Stacks
      operationId: addCard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/card'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
          
  /flashcards/{id}:
    get:
      summary: Get card by ID
      description: Takes an ID and returns the associated card.
      tags:
        - Flashcards
      operationId: getCardById
      parameters:
        - in: path
          name: id 
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/card'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED

     
          
    put:
      summary: Update a card by ID
      description: Takes an ID and returns the associated card after any updates are made.
      tags:
        - Stacks
      operationId: updateCardById
      parameters:
        - in: path
          name: id 
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/card'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
          
    delete:
      summary: Delete a card by ID
      description: Takes an ID and returns a boolean describing if the card was deleted. 
      tags:
        - Stacks
      operationId: deleteCardById
      parameters:
        - in: path
          name: id 
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/card'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
      
          
  /flashcards:
    post:
      summary: Adds a card
      description: Adds a card to a stack
      tags:
        - Flashcards
      operationId: Addcard
      parameters:
        - in: header
          name: username 
          required: true
          schema:
            type: string
            minimum: 1
        - in: header
          name: password
          required: true
          schema:
            type: string
            minimum: 1    
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/card'
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
    delete:
      summary: Deletes a card
      description: Deletes a card from a stack
      tags:
        - Flashcards
      operationId: Deletecard
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
    patch:
      summary: Updates a card
      description: Updates a card from a stack
      tags:
        - Flashcards
      operationId: Updatecard
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: BAD REQUEST
        '401':
          description: UNAUTHORIZED
components:
  schemas:
    User:
      description: This is the user Object
      type: object
      properties:
        createdDate:
          type: string
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
        id:
          description: User ID for internal management
          type: integer
        isAdmin:
          description: A boolean describing if the user has admin privileges
          type: boolean
        name: 
          description: the name the user would like to be addressed as
          type: string
        username:
          description: Username for the user
          type: string
        password:
          description: password
          type: string
          
    card:
      description: A card
      type: object
      properties:
        id:
          description: The internal ID for the card
          type: integer
        userId:
          description: The username that created the card
          type: string
        front:
          description: the content inside the front portion of the card
          type: string
        back:
          description: the content inside the back portion of the card
          type: string
        tags:
          description: A list of topic tags for the card for indexing
          type: array
          items:
            type: string
        groupId: 
          description: The ID of the group containing the card. Should this be an array? 
          type: integer
        isPublic:
          description: Boolean describing the card's security level. 
          type: boolean
          
    stack:
      description: A stack of cards
      type: object
      properties:
        name:
          description: the human-readable name for the stack
          type: string
        id:
          description: The internal ID for the stack
          type: integer
        userId:
          description: The username that manages the stack
          type: string
        count:
          description: The number of cards in the stack
          type: string
        cards:
          description: all cards in a given stack
          type: array
          items:
            $ref: '#/components/schemas/card'
